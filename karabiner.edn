{:default true

 :alone 500
 :delay 200
 :held 500
 :sim 200
 :simlayer-threshold 222
 :modifiers {;
             :super-hyper [:command :shift :control :option :fn]
             :hyper [:command :shift :control :option]
             :cos [:command :shift :option]
             :cst [:command :shift :control]
             :co [:command :option]
             :cs [:command :shift]
             :ct [:command :control]
             :to [:control :option]
             :ts [:control :shift]
             :os [:option :shift]
             ;
             }
 :froms {;alias
         :delete {:key :delete_or_backspace}
         :return {:key :return_or_enter}
         :tilde {:key :grave_accent_and_tilde}


         ;colemak froms (for easier mnemonics)
         :-q {:key :q}
         :-w {:key :w}
         :-f {:key :e}
         :-p {:key :r}
         :-g {:key :t}
         :-j {:key :y}
         :-l {:key :u}
         :-u {:key :i}
         :-y {:key :o}
         :-semicolon {:key :p}

         :-a {:key :a}
         :-r {:key :s}
         :-s {:key :d}
         :-t {:key :f}
         :-d {:key :g}
         :-h {:key :h}
         :-n {:key :j}
         :-e {:key :k}
         :-i {:key :l}
         :-o {:key :semicolon}

         :-z {:key :z}
         :-x {:key :x}
         :-c {:key :c}
         :-v {:key :v}
         :-b {:key :b}
         :-k {:key :n}
         :-m {:key :m}

         ;
         }

 :tos {;
       :delete {:key :delete_or_backspace}
       :return {:key :return_or_enter}
       :tilde {:key :grave_accent_and_tilde}

       :delete_line {:key :k :modi :cs} ;!CSk

       :expand_selection {:key :right_arrow :modi :cst}
       :shrink_selection {:key :left_arrow :modi :cst}

       :insert_line_below {:key :return_or_enter :modi :command} ;!Creturn_or_enter
       :insert_line_above {:key :return_or_enter :modi :cs} ;!Creturn_or_enter

       ;named symbols
       :open_brace {:key :open_bracket :modi :shift}
       :close_brace {:key :close_bracket :modi :shift}
       :open_paren {:key :9 :modi :shift}
       :close_paren {:key :0 :modi :shift}
       :less_than {:key :comma :modi :shift}
       :greater_than {:key :period :modi :shift}
       :emoji_picker {:key :spacebar :modi :ct} ;!CTspacebar
       :take_screenshot {:key :6 :modi :cs} ;!CS6
       :toggle_screen_brush {:key :tab :modi :option} ;!Otab

       ;brave
       :open_dev_tools {:key :i :modi :co} ;:!COl
       :brave_full_screen {:key :f :modi :ct}
       :focus_omnibar {:key :l :modi :command}
       :next_tab {:key tab :modi :control}
       :prev_tab {:key tab :modi :ts}
       ;
       }
 
 :templates {;
             :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :code-project "osascript -e 'tell application \"Visual Studio Code\" to activate' &&
                            open -a 'Visual Studio Code' %s -g %s
                            "
             :delay "osascript -e 'delay \"%s\"'"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :type "osascript -e 'tell application \"System Events\" to keystroke \"%s\"'"
             :launch "osascript -e '
                        tell application \"%s\" 
                           reopen
                           activate
                        end tell
                        '"
             :open-brave "osascript -e '
                        set address to \"%s\"
                        
                        tell application \"Brave\"
                           activate
                                if not (exists window 1) then reopen
                                repeat with w in windows
                                        set i to 1
                                        repeat with t in tabs of w
                                        if URL of t contains address then
                                                set active tab index of w to i
                                                set index of w to 1
                                                return
                                        end if
                                        set i to i + 1
                                        end repeat
                                end repeat
                                open location \"http://\" & address
                        end tell
                           '"
             :open "open \"%s\""
             :open-a "open -a '%s'"
             :paste "osascript -e '
                        set the clipboard to \"%s\"
                        tell application \"System Events\"
                                keystroke \"v\" using command down
                        end tell
                '"
             :restream "osascript -e 'tell application \"Restream Chat\" to activate'"
             :zsh "zsh ~/.zfunc/'%s'"
             :modify "osascript -e '
                        tell application \"System Events\" to keystroke \"c\" using {command down}
                        set clipboardText to the clipboard
                        set selectedText to the quoted form of clipboardText
                        set output to do shell script \". ~/.jsrc; %s \" & selectedText
                        set the clipboard to output                    
                        tell application \"System Events\" to keystroke \"v\" using {command down}
                     '"
              :test "osascript -e 'say \"poop\"'"
              :query "osascript -e '
                      tell application id \"com.runningwithcrayons.Alfred\" to run trigger \"scripted-list\" in workflow \"com.johnlindquist.scripted-list\" with argument \"%s\"
                      '"
             ;
             }

 :applications {;
                :brave ["com.brave.Browser"]
                :code ["com.microsoft.VSCode"]
                :slack ["com.tinyspeck.slackmacgap"]
                :iterm ["com.googlecode.iterm2"]
                ;
                }
; Layers Are Typically "Thumb Keys" or "Pinky Keys"
 :layers {;
          :caps_lock-mode {:key :caps_lock :alone {:key :escape}}
          :escape-mode {:key :escape :alone {:key :escape}}
          :launch-mode {:key :f24 :alone {:key :spacebar :modi :left_option}}
          :tab-mode {:key :tab :alone {:key :tab}}
          ;
          }
 :simlayers {;
             :a-mode {:key :a}
             :r-mode {:key :s}
             :tab-mode {:key :tab}
             :query-mode {:key :q}

             :hyphen-mode {:key :hyphen :alone {:key :hyphen}}

             :shift-mode {:key :d} ; "s" on colemak
             :movement-mode {:key :f} ; "t" on colemak
             :delete-mode {:key :j}

             :emoji-mode {:key :z}

             :equals-mode {:key :equal_sign}
             :slash-mode {:key :slash}

             :semicolon-mode {:key :semicolon}
             :backslash-mode {:key :backslash}

             :spacebar-mode {:key :spacebar}

             :modify-mode {:key :m} ;
             :open-mode {:key :semicolon}; "o" in colemak
             :wrap-mode {:key :w} ;
             :window-mode {:key :u};"l" in colemak, use moom to manage the windows
             ;
             }

 :main [;
        
        {:des "global"
         :rules [[:f8 :toggle_screen_brush]
                 ;
                 ]}

        {:des "slack"
         :rules [;
                 [:condi :slack]
                 [:left_command :left_command nil {:alone :!Ct}]
                 ;
                 ]}

        {:des "open files"
         :rules [:open-mode
                 [:-c [:code-project "~/.config"]]
                 [:-k [:code-project "~/work/karabiner/" "~/work/karabiner/karabiner.edn"]]

                 ;
                 ]}

        {:des "brave"
         :rules [:brave
                 [:left_command :left_command nil {:alone [:!Ct]}]
                 [:left_option :left_option nil {:alone [:!Cw]}]
                 [:right_option :focus_omnibar]

                 [:condi :brave :escape-mode]
                 [:-f :brave_full_screen]
                 [:-n :prev_tab]
                 [:-e :next_tab]
                 ;
                 ]}

        {:des "code"
         :rules [:code
          [:condi :code :r-mode] ;control key
          [:-h :!Th]
          [:-j :!Tj]
          [:-k :!Tk]
          [:-l :!Tl]
         ;
         ]}

        {:des "iterm"
         :rules [:iterm
          [:condi :iterm :r-mode] ;control key
          [:-h :!Th]
          [:-j :!Tj]
          [:-k :!Tk]
          [:-l :!Tl]
          [:-c :!Tc]

          [:condi :iterm :a-mode] ;tmux keys
          [:-q [:!Ta :1]] ; go to window 1
          [:-w [:!Ta :2]]
          [:-f [:!Ta :3]]
          [:-p [:!Ta :4]]
          [:-g [:!Ta :5]]
          [:-j [:!Ta :j]] ; move between panes
          [:-k [:!Ta :k]]
          [:-h [:!Ta :h]]
          [:-l [:!Ta :l]]
          [:-z [:!Ta :z]] ; toggle max on a pane
          [:-x [:!Ta :x]] ; kill pane
          [:-c [:!Ta :c]] ; create new window
          [:-r [:!Ta :!S5]] ; split h
          [:-s [:!Ta :!Squote]] ; split v
          [:return [:!Ta :!Squote]] ; split v
         ;
         ]}
;
        {:des "emoji"
         :rules [:emoji-mode
                 [:-a [:paste ""]] ;                
                 [:-b [:paste "üêõ"]] ;bug
                 [:-c [:paste "üëè"]] ;clap
                 [:-d [:paste "üßê"]] ;dignified
                 [:-e :emoji_picker] 
                 [:-f [:paste "Ô∏è‚ú®"]] ;feat
                 [:-g [:paste "üò¨"]] ;grimace
                 [:-h [:paste "üòç"]] ;heart-eyes
                 [:-i [:paste "üëÄ"]] ;I
                 [:-j [:paste "üòÇ"]] ;joking
                 [:-k [:paste ""]] ;
                 [:-l [:paste "‚ù§Ô∏è"]] ;love
                 [:-m [:paste "ü§Ø"]] ;mind blown 
                 [:-n :emoji_picker] ;
                 [:-o [:paste "üí©"]] ;pOop
                 [:-q [:paste "ü§´"]] ;quiet
                 [:-r [:paste "üèé"]] ;racecar
                 [:-s [:paste "üò¢"]] ;sad
                 [:-p [:paste "üéâ"]] ;tada
                 [:-u [:paste "ü§∑‚Äç‚ôÇÔ∏è"]] ;stars
                 [:-v [:paste "üòé"]] ;very cool
                 [:-w [:paste "üòâ"]] ;wink:
                 [:-x [:paste "üòµ"]] ;x-eyes
                 [:-y [:paste "üòÖ"]] ;sweatY
                 [:left_command [:paste "üëç"]]
                 [:left_option [:paste "üëé"]]
                 ;
                 ]}


        {:des "caps_lock"
         :rules [:caps_lock-mode
                 [:##caps_lock :##escape]
                 ; I don't use a caps_lock key on my keyboard
                 ;
                 ]}

        {:des "launch"
         :rules
         [:launch-mode
          [:-d [:launch "Discord"]]
          [:-i [:launch "iTerm"]]
          ;restart karabiner
          [:-k "launchctl kickstart -k org.pqrs.karabiner.karabiner_console_user_server"]
          [:-m [:launch "Spotify"]]
          [:-s [:launch "Slack"]]
          [:-b [:launch "Brave"]] ;
          [:-z [:launch "Visual Studio Code"]];viZ
          [:comma [:launch "Messages"]];
          ;
          ]}


        {:des "delete"
         :rules [:delete-mode
                 [:hyphen :delete_line :code]
                 [:hyphen :!Cdelete_or_backspace]
                 [:-a :!Odelete_or_backspace]
                 [:-r :delete_or_backspace]
                 [:-s :delete_forward]
                 [:-t :!Odelete_forward]
                 [:-d :!Cdelete_forward]
                 ;
                 ]}

        {:des "homerow movement 't'"
         :rules [:movement-mode
                 [:##j :left_arrow]
                 [:##k :down_arrow]
                 [:##l :up_arrow]
                 [:##semicolon :right_arrow]

                 [:##u :!Oleft_arrow]
                 [:##i :!Odown_arrow]
                 [:##o :!Oup_arrow]
                 [:##p :!Oright_arrow]

                 [:##m :!Cleft_arrow]
                 [:##comma :!Cright_arrow]
                 [:##period :home]
                 [:##slash :end]
                 ;
                 ]}

        {:des "homerow shift"
         :rules [:shift-mode
                 [:##j :!Sleft_arrow]
                 [:##k :!Sdown_arrow]
                 [:##l :!Sup_arrow]
                 [:##semicolon :!Sright_arrow]

                 [:##u :!OSleft_arrow]
                 [:##i :!OSdown_arrow]
                 [:##o :!OSup_arrow]
                 [:##p :!OSright_arrow]

                 [:##m :!Shome]
                 [:##comma :!Send]


                 [:left_shift :shrink_selection]
                 [:return_or_enter :insert_line_above]
                 ;;[:semicolon :expand_selection]
                 ;;[:quote :shrink_selection]
                 ;;[:##spacebar {:pkey :button1 :modi :left_command}]
                 ;;[:##left_shift :##button2]
                 ;
                 ]}

        {:des "homerow control"
         :rules [:hyphen-mode
                ;  [:h {:mkey {:hwheel 60}}]
                ;  [:j {:mkey {:vwheel 100}}]
                ;  [:##k {:mkey {:vwheel -60}}]
                ;  [:l {:mkey {:hwheel -60}}]
                 [:##d :left_shift]
                 [:##j :!Fleft_arrow]
                 [:##k :!Fdown_arrow]
                 [:##l :!Fup_arrow]
                 [:##semicolon :!Fright_arrow]
                 ;
                 ]}


        {:des "spacebar"
        
         :rules [:spacebar-mode
                 [:-a :!S1]
                 [:-r :!Shyphen]
                 [:-s :hyphen]
                 [:-t :!Ssemicolon]
                 [:-c :!Sequal_sign]

                 [:-n :open_brace]
                 [:-e :close_brace]
                 [:-i :equal_sign]
                 [:-o :greater_than]

                 [:-m :open_bracket]
                 [:comma :close_bracket]
                 [:period :open_paren]
                 [:slash :close_paren]

                ;; [:j :open_brace]
                ;; [:k :close_brace]

                ;; [:l :less_than]
                ;; [:semicolon :greater_than]

                 ;symbol sequences
                 [:left_shift [:spacebar :equal_sign :spacebar]]; =  =  =  =  =  =  =  =  =  =
                 [:q [:!S9 :!S0 :equal_sign :greater_than :spacebar]];()=> 
                 [:e [:!S9 :!S9 :!S0 :equal_sign :greater_than :spacebar :open_brace :close_brace :!S0 :left_arrow :left_arrow]];(()=> {})

                 [:g [:spacebar :equal_sign :greater_than :spacebar]]; =>  => ={} =""
                 [:h [:equal_sign :open_brace :close_brace :left_arrow]];={}
                 [:b [:equal_sign :open_brace :close_brace :left_arrow]];={}
                 [:quote [:equal_sign :!Squote :!Squote :left_arrow]];=""
                 ;
                 ]}



        {:des "tab-mode"
         :rules [:tab-mode
                 ;open urls
                 [:-g [:open-brave "mail.google.com"]]
                 [:-k [:open-brave "github.com/search?q=extension%3A.edn+filename%3Akarabiner.edn&type=Code&ref=advsearch&l=&l="]]
                 [:-l [:open-brave "localhost:3000"]]
                 [:-m [:open-brave "monkeytype.com"]]
                 [:-t [:open-brave "twitter.com"]]
                 [:-y [:open-brave "youtube.com"]]
;
                 ]}

        {:des "window-mode (global)"
         :rules [:window-mode
                 ;open urls
                 [:-q :!!1]
                 [:-w :!!2]
                 [:-f :!!3]
                 [:-a :!!4]
                 [:-r :!!5]
                 [:-s :!!6]
                 [:-z :!!7]
                 [:-x :!!8]
                 [:-c :!!9]
;
                 ]}

        {:des "colemak"
         :rules [;
                 [:##e :f]
                 [:##r :p]
                 [:##t :g]
                 [:##y :j]
                 [:##u :l]
                 [:##i :u]
                 [:##o :y]
                 [:##p :semicolon]

                 [:##s :r]
                 [:##d :s]
                 [:##f :t]
                 [:##g :d]
                 [:##j :n]
                 [:##k :e]
                 [:##l :i]
                 [:##semicolon :o]

                 [:##n :k]

                 [:close_bracket :a]
                 ;
                 ]}



        ;
        ]}


;; rule [:period ["media-mode" 1] nil {:afterup ["media-mode" 0] :alone :period}]
;;       |_____| |_______________| |_| |_________________________________________|
;;        <from>    <to>      <conditions>         <other options>

    ;; !  | means mandatory
    ;; #  | means optional
    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; 
    ;; !! | mandatory command + control + optional + shift (hyper)
    ;; ## | optional any
;; 